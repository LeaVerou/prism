!function(e){var s=/\b(?:abstract|add|alias|as|ascending|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|descending|do|double|dynamic|else|enum|event|explicit|extern|finally|fixed|float|for|foreach|from|get|global|goto|group|if|implicit|in|int|interface|internal|into|is|join|let|lock|long|nameof|namespace|new|null|object|operator|orderby|out|override|params|partial|private|protected|public|readonly|ref|remove|return|sbyte|sealed|select|set|short|sizeof|stackalloc|static|string|struct|switch|this|throw|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|value|var|virtual|void|volatile|where|while|yield)\b/,n={keyword:s,punctuation:/[<>(),.:[\]]/};e.languages.csharp=e.languages.extend("clike",{keyword:s,string:[{pattern:/@("|')(?:\1\1|\\[\s\S]|(?!\1)[^\\])*\1/,greedy:!0},{pattern:/("|')(?:\\.|(?!\1)[^\\\r\n])*?\1/,greedy:!0}],"class-name":[{pattern:/((?:^|\W)\[)[A-Z]\w*(?:\.\w+)*\b/,lookbehind:!0,inside:{punctuation:/\./}},{pattern:/(\b(?:class|enum|interface|struct)\s+)[A-Z]\w*(?:\s*<[^>]+>)?/,lookbehind:!0,inside:{punctuation:/[<>,]/}},{pattern:/(\bcatch\s*\()[A-Z]\w*(?:\.\w+)*\b/,lookbehind:!0,inside:{punctuation:/\./}},{pattern:/(\bwhere\s+)[A-Z]\w*\b/,lookbehind:!0},{pattern:/(\b(?:is|as)\s+)[A-Z]\w*(?:\.\w+)*(?:<(?:[^>\n=;{}]+|>(?=\s*(?:\[\s*(?:,\s*)*\]\s*)*[,.>?)]))+?>)?(?:\.\w+)*(?:\[\s*(?:,\s*)*\])*/,lookbehind:!0,inside:n},{pattern:/\b[A-Z]\w*(?:\.\w+)*(?:\[\s*(?:,\s*)*\])*(?=\s+\w+(?:\s*[=,;:{)\]]|\s+in))/,inside:n}],number:/(?:\b0(?:x[\da-f_]*[\da-f]|b[01_]*[01])|(?:\B\.\d+(?:_+\d+)*|\b\d+(?:_+\d+)*(?:\.\d+(?:_+\d+)*)?)(?:e[-+]?\d+(?:_+\d+)*)?)(?:ul|[flu])?\b/i}),e.languages.insertBefore("csharp","class-name",{"type-expression":{pattern:/(\b(?:default|typeof)\s*\(\s*)[^()]+?(?=\s*\))/,lookbehind:!0,inside:n,alias:"class-name"},"return-type":{pattern:/\b[A-Z]\w*(?:\.\w+)*(?:<[^\n=;{]+?>(?:\.\w+)*)?(?:\[\s*(,\s*)*\])?(?=\s+(?:[A-Z]\w*\.)?(?:\w+(?:\s*<[^>]+>)?\s*(?:[({]|=>)|this\s*\[))/,inside:n,alias:"class-name"},"constructor-invocation":{pattern:/(\bnew\s+)[A-Z]\w*(?:\.\w+)*(?:<(?:[^>\n=;{}]+|>(?=\s*(?:\[\s*(?:,\s*)*\]\s*)*[,.>?)]))+?>)?(?:\.\w+)*(?:\[\s*(?:,\s*)*\])*(?=\s*[[({])/,lookbehind:!0,inside:n,alias:"class-name"},"generic-method":{pattern:/\w+\s*<[^\n=;{(]+?>(?=\s*\()/,inside:{"function":/^\w+/,"class-name":{pattern:/\b[A-Z]\w*(?:\.\w+)*\b/,inside:{punctuation:/\./}},keyword:s,punctuation:/[<>(),.:[\]]/}},"type-list":{pattern:/(\b(?:class|interface|struct|enum)\s+[A-Z]\w*(?:\s*<[^>]+>)?\s*:\s*|\bwhere\s+\w+\s*:\s*)(?:\w+(?:<[^\r\n=;{]+?>)?(?:\s*,)?\s*?)+(?=\s*(?:where|[{;]|=>))/,lookbehind:!0,inside:{keyword:s,"class-name":{pattern:/\b[A-Z]\w*(?:\.\w+)*\b/,inside:{punctuation:/\./}},punctuation:/[<>(),.:[\]]/}},preprocessor:{pattern:/(^\s*)#.*/m,lookbehind:!0,alias:"property",inside:{directive:{pattern:/(\s*#)\b(?:define|elif|else|endif|endregion|error|if|line|pragma|region|undef|warning)\b/,lookbehind:!0,alias:"keyword"}}}})}(Prism),Prism.languages.dotnet=Prism.languages.csharp;